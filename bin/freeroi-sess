#! /usr/bin/env python
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:

"""Main application for FreeROI GUI."""

import os
import argparse
import subprocess


def surf_sess(args, freeroi):
    if not args.geo_path:
        raise RuntimeError('Surface analysis need geometry data, you can specify its full path through "-geo".')

    # start to get data
    # -----------------
    with open(args.sessid_file, 'r') as f1:
        sessid = f1.readlines()
        sessid = [_.strip() for _ in sessid]

    for sess in sessid:
        args_list = []
        geo_path = args.geo_path.format(id=sess)
        print(geo_path)

        # input image
        for img in args.img_list:
            img_path = img[0].format(id=sess)
            print(img_path)
            args_list.extend(['-data', img_path,
                              '-lt', img[1],
                              '-ht', img[2],
                              '-c', img[3]])
        # input reference
        if args.ref_list:
            for ref in args.ref_list:
                ref_path = ref[0].format(id=sessid)
                print(ref_path)
                args_list = ['-data', ref_path,
                             '-lt',  ref[1],
                             '-ht',  ref[2],
                             '-c',  ref[3]] + args_list

        # output image name
        if args.new_img:
            args_list.extend(['-n', args.new_img])

        # specify camera view
        if args.view:
            args_list.extend(['-view', args.view[0], args.view[1]])

        # set output directory as user-specified destination
        # or default directory same as img's directory
        if args.dest:
            args_list.extend(['-dest', args.dest])
        else:
            img_tmp = args.img_list[0][0].format(id=sess)
            dest = os.path.dirname(img_tmp)
            args_list.extend(['-dest', dest])

        # execute command
        cmd_list = [freeroi,
                    '-data', geo_path,
                    '-lt', '0',
                    '-ht', '0',
                    '-c', 'gray'] + args_list + ['-type', 'surface']
        subprocess.call(cmd_list)


def vol_sess(args, freeroi):

    freeroi_dir = os.path.dirname(freeroi)
    freeroi_dir_par = os.path.dirname(freeroi_dir)
    template_file = os.path.join(freeroi_dir_par, 'froi', 'data', 'standard',
                                 'MNI152_T1_2mm_brain.nii.gz')
    print(template_file)

    with open(args.sessid_file, 'r') as f1:
        sessid = f1.readlines()
        sessid = [_.strip() for _ in sessid]

    for sess in sessid:
        args_list = []

        # input image
        for img in args.img_list:
            img_path = img[0].format(id=sess)
            print(img_path)
            args_list.extend(['-data', img_path,
                              '-lt', img[1],
                              '-ht', img[2],
                              '-c', img[3]])
        # input reference
        if args.ref_list:
            for ref in args.ref_list:
                ref_path = ref[0].format(id=sessid)
                print(ref_path)
                args_list = ['-data', ref_path,
                             '-lt', ref[1],
                             '-ht', ref[2],
                             '-c', ref[3]] + args_list

        # output image
        if args.new_img:
            args_list.extend(['-n', args.new_img])

        # set output directory as user-specified destination
        # or default directory same as img's directory
        if args.dest:
            args_list.extend(['-dest', args.dest])
        else:
            img_tmp = args.img_list[0][0].format(id=sess)
            dest = os.path.dirname(img_tmp)
            args_list.extend(['-dest', dest])

        # execute command
        cmd_list = [freeroi,
                    '-data', template_file,
                    '-lt', '3000',
                    '-ht', '8000',
                    '-c', 'gray'] + args_list + ['-type', 'volume']
        subprocess.call(cmd_list)


def main():
    """Main entrance for batch processing of freeroi."""
    parser = argparse.ArgumentParser(description='FreeROI for batch processing')
    parser.add_argument('-sf',
                        dest='sessid_file',
                        metavar='sessid file',
                        required=True,
                        help='a session ID file containing all subjects')
    parser.add_argument('-img',
                        dest='img_list', nargs=4,
                        metavar=('image_data', 'low_thresh', 'high_thresh', 'colormap'),
                        required=True,
                        action='append',
                        help='specify images such as function data and its low_thresh, high_thresh, colormap')
    parser.add_argument('-ref',
                        dest='ref_list', nargs=4,
                        metavar=('reference_file', 'low_thresh', 'high_thresh', 'colormap'),
                        required=False,
                        action='append',
                        help='specify references and its low_thresh, high_thresh, colormap')
    parser.add_argument('-new',
                        dest='new_img',
                        metavar='image name for output',
                        required=False,
                        help='specify the output image name')
    parser.add_argument('-type',
                        dest='type',
                        metavar='data type',
                        choices=['surface', 'volume'],
                        required=True,
                        help='Specify data type')
    parser.add_argument('-dest',
                        dest='dest',
                        metavar='destination directory',
                        required=False,
                        help='specify a directory where output file should be')
    # surface-specific parameters
    parser.add_argument('-geo',
                        dest='geo_path',
                        metavar="geometry data's full path",
                        required=False,
                        help="specify the geometry full path")
    parser.add_argument('-view',
                        dest='view', nargs=2,
                        metavar="phi and theta angles",
                        required=False,
                        help="phi and theta angles of mayavi camera view")
    args = parser.parse_args()

    sess_working_dir = os.path.dirname(__file__)
    freeroi = os.path.join(sess_working_dir, 'freeroi')
    if args.type == 'volume':
        vol_sess(args, freeroi)
    else:
        surf_sess(args, freeroi)


if __name__ == '__main__':
    main()
